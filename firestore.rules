rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read/write their own user document, but not others
    match /users/{userId} {
      allow read, update, delete: if request.auth.uid == userId;
      allow create: if request.auth.uid != null;
    }

    // Schools list is public, but read-only for clients
    match /schools/{schoolId} {
      allow read: if true;
      allow write: if false;
    }
    
    // Products can be read by anyone, but only created/updated by the vendor (authenticated user)
    // and only deleted by the vendor.
    match /products/{productId} {
      allow read: if true;
      allow create: if request.auth.uid != null && request.resource.data.vendorId == request.auth.uid;
      allow update: if request.auth.uid != null && request.resource.data.vendorId == request.auth.uid;
      allow delete: if request.auth.uid != null && resource.data.vendorId == request.auth.uid;
    }

    // Orders can only be created by an authenticated user (the buyer).
    // The buyer can read their own orders.
    // The vendor can read orders for their products.
    // The rider assigned can read the order.
    match /orders/{orderId} {
      allow create: if request.auth.uid != null && request.resource.data.buyerId == request.auth.uid;
      allow read: if request.auth.uid != null && 
                  (resource.data.buyerId == request.auth.uid || 
                   resource.data.vendorId == request.auth.uid ||
                   resource.data.riderId == request.auth.uid);
      allow update: if request.auth.uid != null &&
                    (resource.data.buyerId == request.auth.uid || // Buyer can cancel?
                     resource.data.vendorId == request.auth.uid || // Vendor can update status?
                     (resource.data.riderId == null && request.resource.data.riderId == request.auth.uid) || // Rider can accept
                     resource.data.riderId == request.auth.uid); // Rider can update status
    }
  }
}
